//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : RegisterOps.h
//  @ Date : 2010-3-22
//  @ Author : 
//
//


#ifndef _REGISTEROPS_H
#define _REGISTEROPS_H

//#include   <afx.h> 
#include "CReg.h"
//#include "XmlTree.h"

class RegisterOps
{
public:
    static RegisterOps* getInstance();
    RegisterOps();
    ~RegisterOps();
    int read(char *pKey, char *pResult);
    int write(char *pKey, char *pResult);
    int access(Action pAction, std::string pKey, char * pField, FiledType pType, ValueList &pResult);
    bool getShares(ValueList & pShares, CString pKeyPrefix);
    bool getBHO(ValueList & pBHOs, CString pKeyPrefix);
    bool getIESecurity(ValueList & pResults, CString pZone, CString pKeyPrefix);
    bool _isKeyItemGroup(CString pKey);
    bool _getSelectedResult(CString pKey, CString pZone, string &pResult, string pZones);
    bool getUsbClass(ValueList &pResult, CString pKeyPrefix);
    bool getUsbType(ValueList &pResult, CString pKeyPrefix);
    bool getUsbHardwareId(ValueList &pResult, CString pKeyPrefix);
    bool getNetworkAdpterInfo(int key, ValueList & pResult, CString pKeyPrefix);
    string getCheckingIpAddress();
    string getComputerName(CString pKeyPrefix);
    string RegisterOps::getComputerName();
    bool dilemeterKey(string pKeys, ValueList & pKey);
    bool getBlueToothName(ValueList &pResult, string pKeys, char * pField);
    bool getBlueToothId(ValueList &pResult, string pKeys, char * pField);
    bool getWirelessCardId(ValueList &pResult, string pKeys, char * pField);
    bool getWirelessCardName(ValueList &pResult, string pKeys, char * pField);
    bool getModemInfo(ValueList &pResult, string pKeys, char * pField, FiledType pType);
    bool getAutoShare(ValueList &pResult, string pKeys, char * pField, FiledType pType);
    bool readValue(string pKey, char * pField, FiledType pType, string & res);
    bool getSP(ValueList &PResult, string pKey, char * pField, FiledType pType);    
    bool RegLoad(HKEY hKey, bool bCurUserFlag = false);    
    bool RegUnLoad(HKEY hKey);
    void set_RegFilePath(string& val){m_regFilePath = val;}
    string get_RegFilePath(){return m_regFilePath;}
    void formatHKey(string& pKey);
    bool get_BootWay(){return m_bUboot;}
    bool getSoftwareInstall(ValueList &PResult, string pKey, char * pField, FiledType pType);
    string formatDate(string date);

private:
    static RegisterOps *mInstancePtr;
    string m_regFilePath;
    ValueList m_regList;
    bool m_bUboot;
};

#endif  //_REGISTEROPS_H
